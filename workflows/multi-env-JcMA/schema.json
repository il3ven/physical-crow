{
  "description": "",
  "env": {},
  "id": "XjGbFSxxrYblrbmGJcMA",
  "inputs": {
    "properties": {
      "number": {
        "buildship": {
          "index": 1
        },
        "default": 0,
        "title": "Number",
        "type": "number"
      },
      "string": {
        "buildship": {
          "index": 0
        },
        "title": "String",
        "type": "string"
      },
      "string1": {
        "buildship": {
          "index": 2
        },
        "title": "String 1",
        "type": "string"
      }
    },
    "required": [
      "string",
      "number",
      "string1"
    ],
    "type": "object"
  },
  "lastBranchDeploymentHash": {
    "migratedprod": "OMwpN8cm0tk0R5jBSsWmiDmDDMdCcZrBubQnIWIBSQ8=",
    "test": "+R1S3CMj67cX58HiVUe6AB/ZJ8+damCJ1D+B4NGlJcs="
  },
  "lastDeployment": 1751471198795,
  "lastDeploymentHash": "OMwpN8cm0tk0R5jBSsWmiDmDDMdCcZrBubQnIWIBSQ8=",
  "name": "multi env",
  "nodeValues": {
    "0ad00930-bea8-4c04-93da-c08dfa57a34c": {
      "max": 666,
      "min": 1,
      "oAuthIntegrations": {}
    },
    "1dcc4f38-0d0d-4a89-80b2-f795930ada37": {
      "_$bsCacheMaxAge_": 0,
      "_$bsStatusCode_": "200",
      "_$lastNodeOutput_": {
        "_$keys_": [
          "0ad00930-bea8-4c04-93da-c08dfa57a34c"
        ]
      },
      "output": {
        "_$expression_": "hey",
        "_$schema_": [],
        "hasErrors": false,
        "type": "text"
      }
    },
    "24feae0d-ef0b-4774-9314-77395e198e27": {
      "config.method": "GET",
      "config.path": "/multiEnv",
      "config.requestContentType": "application/json",
      "inputs.number": {
        "_$expression_": "ctx?.[\"root\"]?.[\"24feae0d-ef0b-4774-9314-77395e198e27\"]?.[\"query\"].number",
        "_$schema_": []
      },
      "inputs.string": {
        "_$expression_": "ctx?.[\"root\"]?.[\"24feae0d-ef0b-4774-9314-77395e198e27\"]?.[\"query\"].string",
        "_$schema_": []
      },
      "inputs.string1": {
        "_$expression_": "ctx?.[\"root\"]?.[\"24feae0d-ef0b-4774-9314-77395e198e27\"]?.[\"query\"].string1",
        "_$schema_": []
      },
      "outputs.body": {
        "_$keys_": [
          "output"
        ]
      },
      "outputs.cacheMaxAge": {
        "_$keys_": [
          "state",
          "_$bsCacheMaxAge_"
        ]
      },
      "outputs.status": {
        "_$keys_": [
          "state",
          "_$bsStatusCode_"
        ]
      }
    },
    "361ae1a3-715a-405d-a3ab-429e74853b1d": {
      "config.method": "GET",
      "config.path": "/multiEnv-429e74853b1d",
      "config.requestContentType": "application/json",
      "outputs.body": {
        "_$keys_": [
          "output"
        ]
      },
      "outputs.cacheMaxAge": {
        "_$keys_": [
          "state",
          "_$bsCacheMaxAge_"
        ]
      },
      "outputs.status": {
        "_$keys_": [
          "state",
          "_$bsStatusCode_"
        ]
      }
    }
  },
  "nodes": [
    {
      "_libRef": {
        "integrity": "v3:11562a86e48d65e4511a9adab1bab058",
        "isDirty": false,
        "libNodeRefId": "@buildship/get-random-number",
        "libType": "public",
        "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodesV2/@buildship/get-random-number/1.0.0/build.cjs",
        "version": "1.0.0"
      },
      "dependencies": {},
      "id": "0ad00930-bea8-4c04-93da-c08dfa57a34c",
      "inputs": {
        "properties": {
          "max": {
            "buildship": {
              "index": 1,
              "sensitive": false
            },
            "default": 100,
            "description": "The maximum value (exclusive) for the random number.",
            "properties": {},
            "title": "max",
            "type": "number"
          },
          "min": {
            "buildship": {
              "index": 0,
              "sensitive": false
            },
            "default": 1,
            "description": "The minimum value (inclusive) for the random number.",
            "properties": {},
            "title": "min",
            "type": "number"
          }
        },
        "required": [
          "min",
          "max"
        ],
        "type": "object"
      },
      "integrations": [],
      "label": "Get Random Number",
      "meta": {
        "description": "",
        "icon": {
          "type": "URL",
          "url": null
        },
        "id": "get-random-number",
        "name": "Get Random Number"
      },
      "output": {
        "buildship": {
          "index": 0
        },
        "title": "random number",
        "type": "number"
      },
      "script": "export default function getRandomNumber({\n    min,\n    max\n}) {\n    //[Ensure min and max are numbers and min is less than max]\n    if (typeof min !== 'number' || typeof max !== 'number' || min >= max) {\n        throw new Error('Invalid input: min should be less than max and both should be numbers');\n    }\n    //[Calculate and return a random number between min (inclusive) and max (exclusive)]\n    return Math.floor(Math.random() * (max - min)) + min;\n}",
      "type": "script"
    },
    {
      "id": "1dcc4f38-0d0d-4a89-80b2-f795930ada37",
      "label": "Flow Output",
      "type": "output"
    }
  ],
  "outputs": {
    "properties": {
      "output": {
        "buildship": {
          "index": 0
        },
        "title": "Output"
      }
    },
    "required": [],
    "type": "object"
  },
  "runtimeVersion": "v3",
  "stickyNotes": {},
  "testExamples": {},
  "triggers": [
    {
      "_libRef": {
        "integrity": "v3:dcdad5461af17e35bfc16ca499be92bf",
        "isDirty": false,
        "libNodeRefId": "@buildship/http-v2",
        "libType": "public",
        "src": "https://storage.googleapis.com/buildship-library-us-central1/triggers/@buildship/http-v2/1.0.37/__verify.cjs",
        "version": "1.0.37"
      },
      "config": {
        "properties": {
          "method": {
            "buildship": {
              "defaultExpressionType": "text",
              "index": 1,
              "options": [
                {
                  "label": "POST",
                  "value": "POST"
                },
                {
                  "label": "GET",
                  "value": "GET"
                },
                {
                  "label": "PUT",
                  "value": "PUT"
                },
                {
                  "label": "DELETE",
                  "value": "DELETE"
                },
                {
                  "label": "PATCH",
                  "value": "PATCH"
                }
              ],
              "sensitive": false
            },
            "default": "POST",
            "description": "HTTP method",
            "enum": [
              "POST",
              "GET",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "title": "Method",
            "type": "string"
          },
          "path": {
            "buildship": {
              "index": 0,
              "sensitive": false
            },
            "default": "/",
            "description": "Path of the endpoint",
            "pattern": "^\\/[^\\s?#]*$",
            "properties": {},
            "title": "Path",
            "type": "string"
          },
          "requestContentType": {
            "buildship": {
              "index": 2.2,
              "options": [
                {
                  "label": "JSON (application/json)",
                  "value": "application/json"
                },
                {
                  "label": "Form (application/x-www-form-urlencoded)",
                  "value": "application/x-www-form-urlencoded"
                },
                {
                  "label": "Text (text/plain)",
                  "value": "text/plain"
                }
              ],
              "sensitive": false
            },
            "default": "application/json",
            "enum": [
              "application/json",
              "application/x-www-form-urlencoded",
              "text/plain"
            ],
            "properties": {},
            "title": "Request Content Type",
            "type": "string"
          }
        },
        "required": [
          "path",
          "method"
        ],
        "sections": {
          "section_e5935beb_b40e_437c_b484_66fa67eccbfa": {
            "buildship": {
              "index": 2
            },
            "title": "Advanced Options",
            "type": "section"
          }
        },
        "structure": [
          {
            "depth": 0,
            "id": "path",
            "index": 0,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "method",
            "index": 1,
            "parentId": null
          },
          {
            "children": [
              {
                "depth": 1,
                "id": "requestContentType",
                "index": 0,
                "parentId": "section_e5935beb_b40e_437c_b484_66fa67eccbfa"
              }
            ],
            "depth": 0,
            "id": "section_e5935beb_b40e_437c_b484_66fa67eccbfa",
            "index": 2,
            "parentId": null
          }
        ],
        "type": "object"
      },
      "data": {
        "buildship": {},
        "description": "Named URL parameters",
        "properties": {
          "body": {
            "buildship": {
              "index": 0,
              "sensitive": true
            },
            "default": {},
            "properties": {},
            "title": "Body",
            "type": "object"
          },
          "headers": {
            "buildship": {
              "index": 0,
              "sensitive": true
            },
            "default": {},
            "description": "Headers of the request",
            "properties": {
              "authorization": {
                "buildship": {
                  "index": 2
                },
                "title": "authorization",
                "type": "string"
              },
              "origin": {
                "buildship": {
                  "index": 0,
                  "sensitive": true
                },
                "default": "",
                "properties": {},
                "title": "origin",
                "type": "string"
              },
              "x-cloud-trace-context": {
                "buildship": {
                  "index": 1,
                  "sensitive": true
                },
                "default": "",
                "properties": {},
                "title": "x-cloud-trace-context",
                "type": "string"
              }
            },
            "title": "Headers",
            "type": "object"
          },
          "params": {
            "buildship": {
              "index": 3
            },
            "description": "Named URL parameters",
            "properties": {},
            "title": "Params",
            "type": "object"
          },
          "query": {
            "buildship": {
              "index": 2
            },
            "description": "Query parameters of the request",
            "title": "Query",
            "type": "object"
          },
          "requestPath": {
            "buildship": {
              "index": 4
            },
            "description": "",
            "title": "Request Path",
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "title": "Request",
        "type": "object"
      },
      "defaultValues": {
        "inputs": "{ _$expression_: 'ctx?.[\"root\"]?.[\"' + props.triggerId + '\"]?.[\"' + (props.method === 'GET' ? 'query' : 'body') + '\"].' + props.inputKey }",
        "path": "'/' + props.wfName + '-' + props.triggerId.split('-').slice(-1).join('')"
      },
      "dependencies": {
        "co-body": "6.2.0",
        "import": "0.0.6",
        "require": "2.4.20"
      },
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full Documentation](https://docs.buildship.com/trigger-nodes/rest-api).",
      "id": "24feae0d-ef0b-4774-9314-77395e198e27",
      "label": "REST API Call",
      "lastDeploymentHash": "dKAo9MQcHObL5tPGIO0qv+8Db/AVd7lt5vLx/AKiKtc=",
      "lifeCycleFunctions": [
        "onExecution",
        "onCreate",
        "onUpdate",
        "getData"
      ],
      "meta": {
        "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full Documentation](https://docs.buildship.com/trigger-nodes/rest-api).",
        "fileUploadLimit": false,
        "icon": {
          "svg": "",
          "type": "SVG"
        },
        "id": "http-v2",
        "name": "REST API Call",
        "payloadLimit": true
      },
      "preSetupPreview": "<div\n  style={{\n    margin: \"22px\",\n    padding: \"24px 42px\",\n    marginTop: \"240px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n  }}\n>\n  <div\n    style={{\n      display: \"flex\",\n      padding: \"8px\",\n      backgroundColor: props.theme.palette.text[50],\n      borderRadius: \"8px\",\n    }}\n  >\n    <SvgIcon>\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M8.47141 3.41397C8.21106 3.15362 7.78895 3.15362 7.52861 3.41397L6.60949 4.33309C6.34914 4.59344 5.92703 4.59344 5.66668 4.33309C5.40633 4.07274 5.40633 3.65063 5.66668 3.39028L6.5858 2.47116C7.36685 1.69011 8.63317 1.69011 9.41422 2.47116L10.3333 3.39028C10.5937 3.65063 10.5937 4.07274 10.3333 4.33309C10.073 4.59344 9.65088 4.59344 9.39053 4.33309L8.47141 3.41397ZM7.5285 12.5853C7.78885 12.8456 8.21096 12.8456 8.47131 12.5853L9.39043 11.6662C9.65078 11.4058 10.0729 11.4058 10.3332 11.6662C10.5936 11.9265 10.5936 12.3486 10.3332 12.609L9.41412 13.5281C8.63307 14.3092 7.36674 14.3092 6.5857 13.5281L5.66658 12.609C5.40623 12.3486 5.40623 11.9265 5.66658 11.6662C5.92693 11.4058 6.34903 11.4058 6.60938 11.6662L7.5285 12.5853ZM12.5859 7.69527C12.8463 7.95562 12.8463 8.37773 12.5859 8.63808L11.6668 9.5572C11.4065 9.81755 11.4065 10.2397 11.6668 10.5C11.9272 10.7604 12.3493 10.7604 12.6096 10.5L13.5288 9.58089C14.3098 8.79984 14.3098 7.53351 13.5288 6.75246L12.6096 5.83334C12.3493 5.57299 11.9272 5.57299 11.6668 5.83334C11.4065 6.09369 11.4065 6.5158 11.6668 6.77615L12.5859 7.69527ZM3.41397 7.69502C3.15362 7.95537 3.15362 8.37748 3.41397 8.63783L4.33309 9.55695C4.59344 9.8173 4.59344 10.2394 4.33309 10.4998C4.07274 10.7601 3.65063 10.7601 3.39028 10.4998L2.47116 9.58064C1.69011 8.79959 1.69011 7.53326 2.47116 6.75221L3.39028 5.83309C3.65063 5.57274 4.07274 5.57274 4.33309 5.83309C4.59344 6.09344 4.59344 6.51555 4.33309 6.7759L3.41397 7.69502ZM7.99996 9.33329C8.73634 9.33329 9.33329 8.73634 9.33329 7.99996C9.33329 7.26358 8.73634 6.66663 7.99996 6.66663C7.26358 6.66663 6.66663 7.26358 6.66663 7.99996C6.66663 8.73634 7.26358 9.33329 7.99996 9.33329Z\"/>\n      </svg>\n    </SvgIcon>\n  </div>\n  <br />\n  <Typography\n    sx={(theme) => ({\n      ...theme.typography.body,\n      color: props.theme.palette.text[400],\n      textAlign: \"center\",\n    })}\n  >\n    Finish your setup for creating your first endpoint\n  </Typography>\n</div>",
      "response": {
        "properties": {
          "body": {
            "buildship": {
              "index": 1,
              "sensitive": false
            },
            "default": {
              "_$keys_": [
                "output"
              ]
            },
            "description": "Body of the response",
            "properties": {},
            "title": "Response Body",
            "type": "object"
          },
          "cacheMaxAge": {
            "buildship": {
              "index": 2,
              "sensitive": false
            },
            "default": 0,
            "description": "Set cache duration in seconds",
            "properties": {},
            "title": "Cache Time",
            "type": "number"
          },
          "status": {
            "buildship": {
              "index": 0,
              "options": [
                {
                  "label": "OK (200)",
                  "value": "200"
                },
                {
                  "label": "Created (201)",
                  "value": "201"
                },
                {
                  "label": "Accepted (202)",
                  "value": "202"
                },
                {
                  "label": "Redirect (301)",
                  "value": "301"
                },
                {
                  "label": "No Content (204)",
                  "value": "204"
                },
                {
                  "label": "Bad Request (400)",
                  "value": "400"
                },
                {
                  "label": "Unauthorized (401)",
                  "value": "401"
                },
                {
                  "label": "Forbidden (403)",
                  "value": "403"
                },
                {
                  "label": "Not Found (404)",
                  "value": "404"
                },
                {
                  "label": "Too Many Requests (429)",
                  "value": "429"
                },
                {
                  "label": "Internal Server Error (500)",
                  "value": "500"
                }
              ]
            },
            "default": "200",
            "description": "The HTTP status code to return",
            "enum": [
              "200",
              "201",
              "202",
              "204",
              "400",
              "401",
              "403",
              "404",
              "429",
              "500"
            ],
            "title": "Status code",
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "sections": {},
        "structure": [
          {
            "depth": 0,
            "id": "body",
            "index": 1,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "status",
            "index": 0,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "cacheMaxAge",
            "index": 2,
            "parentId": null
          }
        ],
        "title": "Response",
        "type": "object"
      },
      "script": "import parser from \"co-body\";\n\nconst onExecution = async (\n\t{ method, requestContentType },\n\t{ nodeReq, request, logging }\n) => {\n\tlet body;\n\tif (method !== \"GET\") {\n        const limit = process.env?.PROJECT_PLAN === \"FREE\" ? \"1MB\" : \"32MB\";\n\t\t//const parser = require('co-body');\n\t\t//const parser = await import('co-body');\n\t\tswitch (requestContentType) {\n\t\t\tcase \"text/plain\":\n\t\t\t\tbody = await parser.text(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tcase \"application/x-www-form-urlencoded\":\n\t\t\t\tbody = await parser.form(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tcase \"application/json\":\n\t\t\t\tbody = await parser.json(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tconst ret = {\n\t\tquery: request.query,\n\t\theaders: request.headers,\n\t\tbody: body !== null && body !== void 0 ? body : {},\n        params: request.params,\n        path: request.path\n\t};\n\treturn ret;\n};\n\nconst getAccessToken = async () => {\n\tconst response = await fetch(\n\t\t\"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n\t\t{\n\t\t\theaders: { \"Metadata-Flavor\": \"Google\" },\n\t\t}\n\t);\n\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Failed to obtain access token: ${response.statusText}`\n\t\t);\n\t}\n\n\tconst data = await response.json();\n\treturn data.access_token;\n};\n\nconst fetchLogEntries = async (triggerId, retries = 3, delay = 1000) => {\n\tconst projectId = process.env.GCLOUD_PROJECT;\n\tconst accessToken = await getAccessToken();\n\n\tconst filter = `logName=\"projects/${projectId}/logs/buildship-node-io\" AND jsonPayload.nId=\"${triggerId}\"`;\n\n\tconst requestBody = {\n\t\tresourceNames: [`projects/${projectId}`], // Added resourceNames field\n\t\tfilter: filter,\n\t\tpageSize: 1,\n\t\torderBy: \"timestamp desc\",\n\t};\n\n\tfor (let attempt = 1; attempt <= retries; attempt++) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"https://logging.googleapis.com/v2/entries:list\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(requestBody),\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorText = await response.text();\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error fetching log entries: ${response.statusText} - ${errorText}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconst entries = data.entries || [];\n\n\t\t\tif (entries.length > 0) {\n\t\t\t\treturn entries;\n\t\t\t}\n\n\t\t\t// Delay before the next attempt if entries were empty\n\t\t\tif (attempt < retries) {\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(`Attempt ${attempt} failed due to an error:`, error);\n\t\t\t// Retry if it's not the last attempt\n\t\t\tif (attempt < retries) {\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to get data after ${retries} attempts.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If all retries exhausted and no entries found\n\tthrow new Error(\"No data found. Send a request to the API and try again.\");\n};\n\nconst getData = async (inputs, { trigger, workflow }) => {\n\ttry {\n\t\tconst entries = await fetchLogEntries(trigger.id, 5, 2000);\n\t\treturn { success: true, message: \"\", data: entries[0].jsonPayload.o };\n\t} catch (err) {\n\t\treturn { success: false, message: err?.message, data: null };\n\t}\n};\n\nexport default { onExecution, onCreate: () => {}, onUpdate: () => {}, getData };\n\n",
      "setupPreview": "<div\n  style={{\n    display: \"flex\",\n    // height: \"700px\",\n    // overflowY: \"auto\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    // margin: \"22px\",\n    padding: \"22px\",\n  }}\n>\n  <div\n    style={{\n      padding: \"24px\",\n      backgroundColor: props.theme.palette.elevation.contextMenu,\n      boxShadow: \"0px 4px 16px 0px rgba(0, 0, 0, 0.08)\",\n      borderRadius: \"16px\",\n      width: \"100%\"\n    }}\n  >\n    <Typography sx={{ marginBottom: \"8px\" }}>{\"Your trigger is ready to receive data!\"}</Typography>\n    <Typography sx={(theme) => ({ color: theme.palette.text[400], marginBottom: \"24px\" })}>\n      Send a request and use the received data to define your workflow input schema.\n    </Typography>\n    <ClipboardTextArea\n      label=\"1. Send a request\"\n      content={`${props.host}${props.triggerValues?.[\"config.path\"]}`}\n    />\n    <Typography sx={(theme) => ({ color: theme.palette.text[400], marginBottom: \"24px\" })}>\n      Send an API request to the endpoint URL above, using your external app or service.\n    </Typography>\n    <InputsBinder\n      header=\"2. Get the latest request\"\n      description=\"\"\n      trigger={props.trigger}\n      resultHeader=\"3. Select the paths to update your input schema\"\n      resultDescription=\"No data received yet!\"\n    />\n  </div>\n</div>\n",
      "type": "http-v2",
      "usage": "<>\n  <ClipboardTextArea\n    label=\"Endpoint URL\"\n    content={`${props.host}${props.triggerValues?.[\"config.path\"]}`}\n  />\n\n  <Typography sx={{ marginTop: \"16px\" }}>Code Snippet</Typography>\n\n  <Typography\n    sx={(theme) => ({ color: theme.palette.text[400], marginTop: \"4px\" })}\n  >\n    {\"Copy and paste the code snippet to your app or website.\"}\n  </Typography>\n  <div style={{ marginTop: \"16px\" }}>\n    <CodeSamples\n      samples={[\n        {\n          code: `async function callEndpoint(${Object.keys(props.inputs.properties ?? {}).join(\", \")}) {\n    const url = '${props.host}${props.triggerValues?.[\"config.path\"]}';\n    ${\n      props.triggerValues?.[\"config.method\"] === \"GET\"\n        ? \"\"\n        : `const data = {\n        ${Object.keys(props.inputs.properties ?? {})\n          .map((key) => key + \": \" + key)\n          .join(\",\\n\")}\n    }`\n    }\n    try {\n        const response = await fetch(url, {\n            method: '${props.triggerValues?.[\"config.method\"]}',\n            headers: {${\n              props.triggerValues?.[\"config.method\"] === \"GET\"\n                ? \"\"\n                : `\n               'Content-Type': '${props.triggerValues?.[\"config.requestContentType\"]}',`\n            }\n            },\n            ${props.triggerValues?.[\"config.method\"] === \"GET\" ? \"\" : \"body: JSON.stringify(data)\"}\n        });\n        const result = await response.json();\n        console.log('Success:', result);\n        return result;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}`,\n          language: \"js\",\n          label: \"JavaScript\",\n        },\n      ]}\n    />\n  </div>\n\n  {(() => {\nconst prompt = `Create an intuitive & responsive webapp using the given endpoint and the example inputs\n\nRules:\n- Use only the inputs given. \n- Include validation for required fields if needed.\n- Handle the output properly depending what it returns (string, number, etc) specially in case of returning lists or json outputs.\n\nasync function callEndpoint(${Object.keys(props.inputs.properties ?? {}).join(\", \")}) {\n    const url = '${props.host}${props.triggerValues?.[\"config.path\"]}';\n    ${props.triggerValues?.[\"config.method\"] === \"GET\" \n        ? \"\" \n        : `const data = {\n            ${Object.keys(props.inputs.properties ?? {})\n                .map((key) => `${key}: ${key}`)\n                .join(\",\\n            \")}\n        }`\n    }\n    \n    try {\n        const response = await fetch(url, {\n            method: '${props.triggerValues?.[\"config.method\"]}',\n            headers: {${props.triggerValues?.[\"config.method\"] === \"GET\"\n                ? \"\"\n                : `\n                'Content-Type': '${props.triggerValues?.[\"config.requestContentType\"]}',`\n            }},\n            ${props.triggerValues?.[\"config.method\"] === \"GET\" ? \"\" : \"body: JSON.stringify(data)\"}\n        });\n        \n        const result = await response.json();\n        console.log('Success:', result);\n        return result;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nHere are sample inputs: \n${props.getInputTypes ? props.getInputTypes(props.inputs || {}) : `{\n  ${Object.entries(props.inputs?.properties ?? {}).map(([key,value]) => `${key}: ${value.type}`).join(\",\\n    \")}\n}`}\n\n\nThe output of this endpoint is:\n${props.getInputTypes ? props.getInputTypes(props.output || {}) : `{\n  ${Object.entries(props.output?.properties ?? {}).map(([key,value]) => `${key}: ${value.type}`).join(\",\\n    \")}\n}`}\n\n\n\n`;\n  \n    return (\n      <>\n        <Typography sx={{ marginTop: \"16px\" }}>AI Handoff</Typography>\n        <Typography\n          sx={(theme) => ({ color: theme.palette.text[400], marginTop: \"4px\" })}\n        >\n          Paste the following prompt into your AI App builder to generate the\n          frontend by connecting to your BuildShip API endpoint and creating the\n          UI you need.\n        </Typography>\n\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            margin: \"16px 0 \",\n          }}\n        >\n          <Typography>Prompt</Typography>\n          <CopyButton variant=\"expanded\" label=\"Copy prompt\" content={prompt} />\n        </div>\n\n        <CodeViewer copy={false} code={prompt} />\n\n        <div style={{ height: \"120px\" }} />\n      </>\n    );\n  })()}\n</>\n",
      "usagePreview": "<div\n  style={{\n    margin: \"22px\",\n    padding: \"24px\",\n    backgroundColor: props.theme.palette.elevation.contextMenu,\n    boxShadow: \"0px 4px 16px 0px rgba(0, 0, 0, 0.08)\",\n    borderRadius: \"16px\",\n  }}\n>\n  <Typography\n    sx={(theme) => ({ ...theme.typography.headline5, marginBottom: \"24px\" })}\n  >\n    {\"Rest API Call\"}\n  </Typography>\n  <TestPanel selectedSegmentToTestId=\"workflow\" />\n</div>\n"
    },
    {
      "_libRef": {
        "integrity": "v3:dcdad5461af17e35bfc16ca499be92bf",
        "isDirty": false,
        "libNodeRefId": "@buildship/http-v2",
        "libType": "public",
        "src": "https://storage.googleapis.com/buildship-library-us-central1/triggers/@buildship/http-v2/1.0.37/__verify.cjs",
        "version": "1.0.37"
      },
      "config": {
        "properties": {
          "method": {
            "buildship": {
              "defaultExpressionType": "text",
              "index": 1,
              "options": [
                {
                  "label": "POST",
                  "value": "POST"
                },
                {
                  "label": "GET",
                  "value": "GET"
                },
                {
                  "label": "PUT",
                  "value": "PUT"
                },
                {
                  "label": "DELETE",
                  "value": "DELETE"
                },
                {
                  "label": "PATCH",
                  "value": "PATCH"
                }
              ],
              "sensitive": false
            },
            "default": "POST",
            "description": "HTTP method",
            "enum": [
              "POST",
              "GET",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "title": "Method",
            "type": "string"
          },
          "path": {
            "buildship": {
              "index": 0,
              "sensitive": false
            },
            "default": "/",
            "description": "Path of the endpoint",
            "pattern": "^\\/[^\\s?#]*$",
            "properties": {},
            "title": "Path",
            "type": "string"
          },
          "requestContentType": {
            "buildship": {
              "index": 2.2,
              "options": [
                {
                  "label": "JSON (application/json)",
                  "value": "application/json"
                },
                {
                  "label": "Form (application/x-www-form-urlencoded)",
                  "value": "application/x-www-form-urlencoded"
                },
                {
                  "label": "Text (text/plain)",
                  "value": "text/plain"
                }
              ],
              "sensitive": false
            },
            "default": "application/json",
            "enum": [
              "application/json",
              "application/x-www-form-urlencoded",
              "text/plain"
            ],
            "properties": {},
            "title": "Request Content Type",
            "type": "string"
          }
        },
        "required": [
          "path",
          "method"
        ],
        "sections": {
          "section_e5935beb_b40e_437c_b484_66fa67eccbfa": {
            "buildship": {
              "index": 2
            },
            "title": "Advanced Options",
            "type": "section"
          }
        },
        "structure": [
          {
            "depth": 0,
            "id": "path",
            "index": 0,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "method",
            "index": 1,
            "parentId": null
          },
          {
            "children": [
              {
                "depth": 1,
                "id": "requestContentType",
                "index": 0,
                "parentId": "section_e5935beb_b40e_437c_b484_66fa67eccbfa"
              }
            ],
            "depth": 0,
            "id": "section_e5935beb_b40e_437c_b484_66fa67eccbfa",
            "index": 2,
            "parentId": null
          }
        ],
        "type": "object"
      },
      "data": {
        "buildship": {},
        "description": "Named URL parameters",
        "properties": {
          "body": {
            "buildship": {
              "index": 0,
              "sensitive": true
            },
            "default": {},
            "properties": {},
            "title": "Body",
            "type": "object"
          },
          "headers": {
            "buildship": {
              "index": 0,
              "sensitive": true
            },
            "default": {},
            "description": "Headers of the request",
            "properties": {
              "authorization": {
                "buildship": {
                  "index": 2
                },
                "title": "authorization",
                "type": "string"
              },
              "origin": {
                "buildship": {
                  "index": 0,
                  "sensitive": true
                },
                "default": "",
                "properties": {},
                "title": "origin",
                "type": "string"
              },
              "x-cloud-trace-context": {
                "buildship": {
                  "index": 1,
                  "sensitive": true
                },
                "default": "",
                "properties": {},
                "title": "x-cloud-trace-context",
                "type": "string"
              }
            },
            "title": "Headers",
            "type": "object"
          },
          "params": {
            "buildship": {
              "index": 3
            },
            "description": "Named URL parameters",
            "properties": {},
            "title": "Params",
            "type": "object"
          },
          "query": {
            "buildship": {
              "index": 2
            },
            "description": "Query parameters of the request",
            "title": "Query",
            "type": "object"
          },
          "requestPath": {
            "buildship": {
              "index": 4
            },
            "description": "",
            "title": "Request Path",
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "title": "Request",
        "type": "object"
      },
      "defaultValues": {
        "inputs": "{ _$expression_: 'ctx?.[\"root\"]?.[\"' + props.triggerId + '\"]?.[\"' + (props.method === 'GET' ? 'query' : 'body') + '\"].' + props.inputKey }",
        "path": "'/' + props.wfName + '-' + props.triggerId.split('-').slice(-1).join('')"
      },
      "dependencies": {
        "co-body": "6.2.0",
        "import": "0.0.6",
        "require": "2.4.20"
      },
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full Documentation](https://docs.buildship.com/trigger-nodes/rest-api).",
      "id": "361ae1a3-715a-405d-a3ab-429e74853b1d",
      "label": "REST API Call",
      "lastDeploymentHash": "hgvFBPMJxuiZjqzJMOEf0ZIWFQR6BG5oJ2KAG3j+tCo=",
      "lifeCycleFunctions": [
        "onExecution",
        "onCreate",
        "onUpdate",
        "getData"
      ],
      "meta": {
        "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full Documentation](https://docs.buildship.com/trigger-nodes/rest-api).",
        "fileUploadLimit": false,
        "icon": {
          "svg": "",
          "type": "SVG"
        },
        "id": "http-v2",
        "name": "REST API Call",
        "payloadLimit": true
      },
      "preSetupPreview": "<div\n  style={{\n    margin: \"22px\",\n    padding: \"24px 42px\",\n    marginTop: \"240px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n  }}\n>\n  <div\n    style={{\n      display: \"flex\",\n      padding: \"8px\",\n      backgroundColor: props.theme.palette.text[50],\n      borderRadius: \"8px\",\n    }}\n  >\n    <SvgIcon>\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M8.47141 3.41397C8.21106 3.15362 7.78895 3.15362 7.52861 3.41397L6.60949 4.33309C6.34914 4.59344 5.92703 4.59344 5.66668 4.33309C5.40633 4.07274 5.40633 3.65063 5.66668 3.39028L6.5858 2.47116C7.36685 1.69011 8.63317 1.69011 9.41422 2.47116L10.3333 3.39028C10.5937 3.65063 10.5937 4.07274 10.3333 4.33309C10.073 4.59344 9.65088 4.59344 9.39053 4.33309L8.47141 3.41397ZM7.5285 12.5853C7.78885 12.8456 8.21096 12.8456 8.47131 12.5853L9.39043 11.6662C9.65078 11.4058 10.0729 11.4058 10.3332 11.6662C10.5936 11.9265 10.5936 12.3486 10.3332 12.609L9.41412 13.5281C8.63307 14.3092 7.36674 14.3092 6.5857 13.5281L5.66658 12.609C5.40623 12.3486 5.40623 11.9265 5.66658 11.6662C5.92693 11.4058 6.34903 11.4058 6.60938 11.6662L7.5285 12.5853ZM12.5859 7.69527C12.8463 7.95562 12.8463 8.37773 12.5859 8.63808L11.6668 9.5572C11.4065 9.81755 11.4065 10.2397 11.6668 10.5C11.9272 10.7604 12.3493 10.7604 12.6096 10.5L13.5288 9.58089C14.3098 8.79984 14.3098 7.53351 13.5288 6.75246L12.6096 5.83334C12.3493 5.57299 11.9272 5.57299 11.6668 5.83334C11.4065 6.09369 11.4065 6.5158 11.6668 6.77615L12.5859 7.69527ZM3.41397 7.69502C3.15362 7.95537 3.15362 8.37748 3.41397 8.63783L4.33309 9.55695C4.59344 9.8173 4.59344 10.2394 4.33309 10.4998C4.07274 10.7601 3.65063 10.7601 3.39028 10.4998L2.47116 9.58064C1.69011 8.79959 1.69011 7.53326 2.47116 6.75221L3.39028 5.83309C3.65063 5.57274 4.07274 5.57274 4.33309 5.83309C4.59344 6.09344 4.59344 6.51555 4.33309 6.7759L3.41397 7.69502ZM7.99996 9.33329C8.73634 9.33329 9.33329 8.73634 9.33329 7.99996C9.33329 7.26358 8.73634 6.66663 7.99996 6.66663C7.26358 6.66663 6.66663 7.26358 6.66663 7.99996C6.66663 8.73634 7.26358 9.33329 7.99996 9.33329Z\"/>\n      </svg>\n    </SvgIcon>\n  </div>\n  <br />\n  <Typography\n    sx={(theme) => ({\n      ...theme.typography.body,\n      color: props.theme.palette.text[400],\n      textAlign: \"center\",\n    })}\n  >\n    Finish your setup for creating your first endpoint\n  </Typography>\n</div>",
      "response": {
        "properties": {
          "body": {
            "buildship": {
              "index": 1,
              "sensitive": false
            },
            "default": {
              "_$keys_": [
                "output"
              ]
            },
            "description": "Body of the response",
            "properties": {},
            "title": "Response Body",
            "type": "object"
          },
          "cacheMaxAge": {
            "buildship": {
              "index": 2,
              "sensitive": false
            },
            "default": 0,
            "description": "Set cache duration in seconds",
            "properties": {},
            "title": "Cache Time",
            "type": "number"
          },
          "status": {
            "buildship": {
              "index": 0,
              "options": [
                {
                  "label": "OK (200)",
                  "value": "200"
                },
                {
                  "label": "Created (201)",
                  "value": "201"
                },
                {
                  "label": "Accepted (202)",
                  "value": "202"
                },
                {
                  "label": "Redirect (301)",
                  "value": "301"
                },
                {
                  "label": "No Content (204)",
                  "value": "204"
                },
                {
                  "label": "Bad Request (400)",
                  "value": "400"
                },
                {
                  "label": "Unauthorized (401)",
                  "value": "401"
                },
                {
                  "label": "Forbidden (403)",
                  "value": "403"
                },
                {
                  "label": "Not Found (404)",
                  "value": "404"
                },
                {
                  "label": "Too Many Requests (429)",
                  "value": "429"
                },
                {
                  "label": "Internal Server Error (500)",
                  "value": "500"
                }
              ]
            },
            "default": "200",
            "description": "The HTTP status code to return",
            "enum": [
              "200",
              "201",
              "202",
              "204",
              "400",
              "401",
              "403",
              "404",
              "429",
              "500"
            ],
            "title": "Status code",
            "type": "string"
          }
        },
        "required": [
          "body"
        ],
        "sections": {},
        "structure": [
          {
            "depth": 0,
            "id": "body",
            "index": 1,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "status",
            "index": 0,
            "parentId": null
          },
          {
            "depth": 0,
            "id": "cacheMaxAge",
            "index": 2,
            "parentId": null
          }
        ],
        "title": "Response",
        "type": "object"
      },
      "script": "import parser from \"co-body\";\n\nconst onExecution = async (\n\t{ method, requestContentType },\n\t{ nodeReq, request, logging }\n) => {\n\tlet body;\n\tif (method !== \"GET\") {\n        const limit = process.env?.PROJECT_PLAN === \"FREE\" ? \"1MB\" : \"32MB\";\n\t\t//const parser = require('co-body');\n\t\t//const parser = await import('co-body');\n\t\tswitch (requestContentType) {\n\t\t\tcase \"text/plain\":\n\t\t\t\tbody = await parser.text(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tcase \"application/x-www-form-urlencoded\":\n\t\t\t\tbody = await parser.form(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tcase \"application/json\":\n\t\t\t\tbody = await parser.json(nodeReq, { limit });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tconst ret = {\n\t\tquery: request.query,\n\t\theaders: request.headers,\n\t\tbody: body !== null && body !== void 0 ? body : {},\n        params: request.params,\n        path: request.path\n\t};\n\treturn ret;\n};\n\nconst getAccessToken = async () => {\n\tconst response = await fetch(\n\t\t\"http://metadata/computeMetadata/v1/instance/service-accounts/default/token\",\n\t\t{\n\t\t\theaders: { \"Metadata-Flavor\": \"Google\" },\n\t\t}\n\t);\n\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Failed to obtain access token: ${response.statusText}`\n\t\t);\n\t}\n\n\tconst data = await response.json();\n\treturn data.access_token;\n};\n\nconst fetchLogEntries = async (triggerId, retries = 3, delay = 1000) => {\n\tconst projectId = process.env.GCLOUD_PROJECT;\n\tconst accessToken = await getAccessToken();\n\n\tconst filter = `logName=\"projects/${projectId}/logs/buildship-node-io\" AND jsonPayload.nId=\"${triggerId}\"`;\n\n\tconst requestBody = {\n\t\tresourceNames: [`projects/${projectId}`], // Added resourceNames field\n\t\tfilter: filter,\n\t\tpageSize: 1,\n\t\torderBy: \"timestamp desc\",\n\t};\n\n\tfor (let attempt = 1; attempt <= retries; attempt++) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"https://logging.googleapis.com/v2/entries:list\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(requestBody),\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorText = await response.text();\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error fetching log entries: ${response.statusText} - ${errorText}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconst entries = data.entries || [];\n\n\t\t\tif (entries.length > 0) {\n\t\t\t\treturn entries;\n\t\t\t}\n\n\t\t\t// Delay before the next attempt if entries were empty\n\t\t\tif (attempt < retries) {\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(`Attempt ${attempt} failed due to an error:`, error);\n\t\t\t// Retry if it's not the last attempt\n\t\t\tif (attempt < retries) {\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to get data after ${retries} attempts.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If all retries exhausted and no entries found\n\tthrow new Error(\"No data found. Send a request to the API and try again.\");\n};\n\nconst getData = async (inputs, { trigger, workflow }) => {\n\ttry {\n\t\tconst entries = await fetchLogEntries(trigger.id, 5, 2000);\n\t\treturn { success: true, message: \"\", data: entries[0].jsonPayload.o };\n\t} catch (err) {\n\t\treturn { success: false, message: err?.message, data: null };\n\t}\n};\n\nexport default { onExecution, onCreate: () => {}, onUpdate: () => {}, getData };\n\n",
      "setupPreview": "<div\n  style={{\n    display: \"flex\",\n    // height: \"700px\",\n    // overflowY: \"auto\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    // margin: \"22px\",\n    padding: \"22px\",\n  }}\n>\n  <div\n    style={{\n      padding: \"24px\",\n      backgroundColor: props.theme.palette.elevation.contextMenu,\n      boxShadow: \"0px 4px 16px 0px rgba(0, 0, 0, 0.08)\",\n      borderRadius: \"16px\",\n      width: \"100%\"\n    }}\n  >\n    <Typography sx={{ marginBottom: \"8px\" }}>{\"Your trigger is ready to receive data!\"}</Typography>\n    <Typography sx={(theme) => ({ color: theme.palette.text[400], marginBottom: \"24px\" })}>\n      Send a request and use the received data to define your workflow input schema.\n    </Typography>\n    <ClipboardTextArea\n      label=\"1. Send a request\"\n      content={`${props.host}${props.triggerValues?.[\"config.path\"]}`}\n    />\n    <Typography sx={(theme) => ({ color: theme.palette.text[400], marginBottom: \"24px\" })}>\n      Send an API request to the endpoint URL above, using your external app or service.\n    </Typography>\n    <InputsBinder\n      header=\"2. Get the latest request\"\n      description=\"\"\n      trigger={props.trigger}\n      resultHeader=\"3. Select the paths to update your input schema\"\n      resultDescription=\"No data received yet!\"\n    />\n  </div>\n</div>\n",
      "type": "http-v2",
      "usage": "<>\n  <ClipboardTextArea\n    label=\"Endpoint URL\"\n    content={`${props.host}${props.triggerValues?.[\"config.path\"]}`}\n  />\n\n  <Typography sx={{ marginTop: \"16px\" }}>Code Snippet</Typography>\n\n  <Typography\n    sx={(theme) => ({ color: theme.palette.text[400], marginTop: \"4px\" })}\n  >\n    {\"Copy and paste the code snippet to your app or website.\"}\n  </Typography>\n  <div style={{ marginTop: \"16px\" }}>\n    <CodeSamples\n      samples={[\n        {\n          code: `async function callEndpoint(${Object.keys(props.inputs.properties ?? {}).join(\", \")}) {\n    const url = '${props.host}${props.triggerValues?.[\"config.path\"]}';\n    ${\n      props.triggerValues?.[\"config.method\"] === \"GET\"\n        ? \"\"\n        : `const data = {\n        ${Object.keys(props.inputs.properties ?? {})\n          .map((key) => key + \": \" + key)\n          .join(\",\\n\")}\n    }`\n    }\n    try {\n        const response = await fetch(url, {\n            method: '${props.triggerValues?.[\"config.method\"]}',\n            headers: {${\n              props.triggerValues?.[\"config.method\"] === \"GET\"\n                ? \"\"\n                : `\n               'Content-Type': '${props.triggerValues?.[\"config.requestContentType\"]}',`\n            }\n            },\n            ${props.triggerValues?.[\"config.method\"] === \"GET\" ? \"\" : \"body: JSON.stringify(data)\"}\n        });\n        const result = await response.json();\n        console.log('Success:', result);\n        return result;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}`,\n          language: \"js\",\n          label: \"JavaScript\",\n        },\n      ]}\n    />\n  </div>\n\n  {(() => {\nconst prompt = `Create an intuitive & responsive webapp using the given endpoint and the example inputs\n\nRules:\n- Use only the inputs given. \n- Include validation for required fields if needed.\n- Handle the output properly depending what it returns (string, number, etc) specially in case of returning lists or json outputs.\n\nasync function callEndpoint(${Object.keys(props.inputs.properties ?? {}).join(\", \")}) {\n    const url = '${props.host}${props.triggerValues?.[\"config.path\"]}';\n    ${props.triggerValues?.[\"config.method\"] === \"GET\" \n        ? \"\" \n        : `const data = {\n            ${Object.keys(props.inputs.properties ?? {})\n                .map((key) => `${key}: ${key}`)\n                .join(\",\\n            \")}\n        }`\n    }\n    \n    try {\n        const response = await fetch(url, {\n            method: '${props.triggerValues?.[\"config.method\"]}',\n            headers: {${props.triggerValues?.[\"config.method\"] === \"GET\"\n                ? \"\"\n                : `\n                'Content-Type': '${props.triggerValues?.[\"config.requestContentType\"]}',`\n            }},\n            ${props.triggerValues?.[\"config.method\"] === \"GET\" ? \"\" : \"body: JSON.stringify(data)\"}\n        });\n        \n        const result = await response.json();\n        console.log('Success:', result);\n        return result;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nHere are sample inputs: \n${props.getInputTypes ? props.getInputTypes(props.inputs || {}) : `{\n  ${Object.entries(props.inputs?.properties ?? {}).map(([key,value]) => `${key}: ${value.type}`).join(\",\\n    \")}\n}`}\n\n\nThe output of this endpoint is:\n${props.getInputTypes ? props.getInputTypes(props.output || {}) : `{\n  ${Object.entries(props.output?.properties ?? {}).map(([key,value]) => `${key}: ${value.type}`).join(\",\\n    \")}\n}`}\n\n\n\n`;\n  \n    return (\n      <>\n        <Typography sx={{ marginTop: \"16px\" }}>AI Handoff</Typography>\n        <Typography\n          sx={(theme) => ({ color: theme.palette.text[400], marginTop: \"4px\" })}\n        >\n          Paste the following prompt into your AI App builder to generate the\n          frontend by connecting to your BuildShip API endpoint and creating the\n          UI you need.\n        </Typography>\n\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            margin: \"16px 0 \",\n          }}\n        >\n          <Typography>Prompt</Typography>\n          <CopyButton variant=\"expanded\" label=\"Copy prompt\" content={prompt} />\n        </div>\n\n        <CodeViewer copy={false} code={prompt} />\n\n        <div style={{ height: \"120px\" }} />\n      </>\n    );\n  })()}\n</>\n",
      "usagePreview": "<div\n  style={{\n    margin: \"22px\",\n    padding: \"24px\",\n    backgroundColor: props.theme.palette.elevation.contextMenu,\n    boxShadow: \"0px 4px 16px 0px rgba(0, 0, 0, 0.08)\",\n    borderRadius: \"16px\",\n  }}\n>\n  <Typography\n    sx={(theme) => ({ ...theme.typography.headline5, marginBottom: \"24px\" })}\n  >\n    {\"Rest API Call\"}\n  </Typography>\n  <TestPanel selectedSegmentToTestId=\"workflow\" />\n</div>\n"
    }
  ],
  "variables": {
    "_$bsCacheMaxAge_": {
      "buildship": {
        "index": 0
      },
      "default": 0,
      "title": "Flow Output Cache Time",
      "type": "number"
    },
    "_$bsStatusCode_": {
      "buildship": {
        "index": 0
      },
      "title": "Flow Output Status Code",
      "type": "string"
    }
  },
  "versionId": "-M1mHXl4-lexZdKacxR6bNO46-zP-Wkpar9aM4sgODE"
}